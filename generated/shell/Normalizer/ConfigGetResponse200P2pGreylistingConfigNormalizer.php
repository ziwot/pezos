<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Pezos\Generated\Shell\Normalizer;

use Jane\Component\JsonSchemaRuntime\Reference;
use Pezos\Generated\Shell\Runtime\Normalizer\CheckArray;
use Pezos\Generated\Shell\Runtime\Normalizer\ValidatorTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ConfigGetResponse200P2pGreylistingConfigNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Pezos\Generated\Shell\Model\ConfigGetResponse200P2pGreylistingConfig::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Pezos\Generated\Shell\Model\ConfigGetResponse200P2pGreylistingConfig::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Pezos\Generated\Shell\Model\ConfigGetResponse200P2pGreylistingConfig();
        if (\array_key_exists('factor', $data) && \is_int($data['factor'])) {
            $data['factor'] = (float) $data['factor'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('factor', $data)) {
            $object->setFactor($data['factor']);
            unset($data['factor']);
        }
        if (\array_key_exists('initial-delay', $data)) {
            $object->setInitialDelay($data['initial-delay']);
            unset($data['initial-delay']);
        }
        if (\array_key_exists('disconnection-delay', $data)) {
            $object->setDisconnectionDelay($data['disconnection-delay']);
            unset($data['disconnection-delay']);
        }
        if (\array_key_exists('increase-cap', $data)) {
            $object->setIncreaseCap($data['increase-cap']);
            unset($data['increase-cap']);
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('factor') && null !== $data->getFactor()) {
            $dataArray['factor'] = $data->getFactor();
        }
        if ($data->isInitialized('initialDelay') && null !== $data->getInitialDelay()) {
            $dataArray['initial-delay'] = $data->getInitialDelay();
        }
        if ($data->isInitialized('disconnectionDelay') && null !== $data->getDisconnectionDelay()) {
            $dataArray['disconnection-delay'] = $data->getDisconnectionDelay();
        }
        if ($data->isInitialized('increaseCap') && null !== $data->getIncreaseCap()) {
            $dataArray['increase-cap'] = $data->getIncreaseCap();
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Pezos\Generated\Shell\Model\ConfigGetResponse200P2pGreylistingConfig::class => false];
    }
}

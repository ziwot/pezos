<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Pezos\Generated\Shell\Normalizer;

use Jane\Component\JsonSchemaRuntime\Reference;
use Pezos\Generated\Shell\Runtime\Normalizer\CheckArray;
use Pezos\Generated\Shell\Runtime\Normalizer\ValidatorTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ChainsChainIdDelegatorsContributionInt32PkhGetResponse200Normalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Pezos\Generated\Shell\Model\ChainsChainIdDelegatorsContributionInt32PkhGetResponse200::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Pezos\Generated\Shell\Model\ChainsChainIdDelegatorsContributionInt32PkhGetResponse200::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Pezos\Generated\Shell\Model\ChainsChainIdDelegatorsContributionInt32PkhGetResponse200();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('own_delegated', $data)) {
            $object->setOwnDelegated($data['own_delegated']);
            unset($data['own_delegated']);
        }
        if (\array_key_exists('external_delegators', $data)) {
            $values = [];
            foreach ($data['external_delegators'] as $value) {
                $values[] = $this->denormalizer->denormalize($value, \Pezos\Generated\Shell\Model\ChainsChainIdDelegatorsContributionInt32PkhGetResponse200ExternalDelegatorsItem::class, 'json', $context);
            }
            $object->setExternalDelegators($values);
            unset($data['external_delegators']);
        }
        if (\array_key_exists('former_delegators_unstake_requests', $data)) {
            $object->setFormerDelegatorsUnstakeRequests($data['former_delegators_unstake_requests']);
            unset($data['former_delegators_unstake_requests']);
        }
        if (\array_key_exists('overstaked', $data)) {
            $object->setOverstaked($data['overstaked']);
            unset($data['overstaked']);
        }
        if (\array_key_exists('total_delegated_including_overdelegated', $data)) {
            $object->setTotalDelegatedIncludingOverdelegated($data['total_delegated_including_overdelegated']);
            unset($data['total_delegated_including_overdelegated']);
        }
        if (\array_key_exists('total_delegated_after_limits', $data)) {
            $object->setTotalDelegatedAfterLimits($data['total_delegated_after_limits']);
            unset($data['total_delegated_after_limits']);
        }
        if (\array_key_exists('overdelegated', $data)) {
            $object->setOverdelegated($data['overdelegated']);
            unset($data['overdelegated']);
        }
        foreach ($data as $key => $value_1) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value_1;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        $dataArray['own_delegated'] = $data->getOwnDelegated();
        $values = [];
        foreach ($data->getExternalDelegators() as $value) {
            $values[] = $this->normalizer->normalize($value, 'json', $context);
        }
        $dataArray['external_delegators'] = $values;
        $dataArray['former_delegators_unstake_requests'] = $data->getFormerDelegatorsUnstakeRequests();
        $dataArray['overstaked'] = $data->getOverstaked();
        $dataArray['total_delegated_including_overdelegated'] = $data->getTotalDelegatedIncludingOverdelegated();
        $dataArray['total_delegated_after_limits'] = $data->getTotalDelegatedAfterLimits();
        $dataArray['overdelegated'] = $data->getOverdelegated();
        foreach ($data as $key => $value_1) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value_1;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Pezos\Generated\Shell\Model\ChainsChainIdDelegatorsContributionInt32PkhGetResponse200::class => false];
    }
}

<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Pezos\Generated\Shell\Normalizer;

use Jane\Component\JsonSchemaRuntime\Reference;
use Pezos\Generated\Shell\Runtime\Normalizer\CheckArray;
use Pezos\Generated\Shell\Runtime\Normalizer\ValidatorTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ConfigGetResponse200Normalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Pezos\Generated\Shell\Model\ConfigGetResponse200::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Pezos\Generated\Shell\Model\ConfigGetResponse200::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Pezos\Generated\Shell\Model\ConfigGetResponse200();
        if (\array_key_exists('disable-config-validation', $data) && \is_int($data['disable-config-validation'])) {
            $data['disable-config-validation'] = (bool) $data['disable-config-validation'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('data-dir', $data)) {
            $object->setDataDir($data['data-dir']);
            unset($data['data-dir']);
        }
        if (\array_key_exists('disable-config-validation', $data)) {
            $object->setDisableConfigValidation($data['disable-config-validation']);
            unset($data['disable-config-validation']);
        }
        if (\array_key_exists('rpc', $data)) {
            $object->setRpc($this->denormalizer->denormalize($data['rpc'], \Pezos\Generated\Shell\Model\ConfigGetResponse200Rpc::class, 'json', $context));
            unset($data['rpc']);
        }
        if (\array_key_exists('p2p', $data)) {
            $object->setP2p($this->denormalizer->denormalize($data['p2p'], \Pezos\Generated\Shell\Model\ConfigGetResponse200P2p::class, 'json', $context));
            unset($data['p2p']);
        }
        if (\array_key_exists('log', $data)) {
            $object->setLog($this->denormalizer->denormalize($data['log'], \Pezos\Generated\Shell\Model\ConfigGetResponse200Log::class, 'json', $context));
            unset($data['log']);
        }
        if (\array_key_exists('internal-events', $data)) {
            $object->setInternalEvents($data['internal-events']);
            unset($data['internal-events']);
        }
        if (\array_key_exists('shell', $data)) {
            $object->setShell($this->denormalizer->denormalize($data['shell'], \Pezos\Generated\Shell\Model\ConfigGetResponse200Shell::class, 'json', $context));
            unset($data['shell']);
        }
        if (\array_key_exists('network', $data)) {
            $object->setNetwork($data['network']);
            unset($data['network']);
        }
        if (\array_key_exists('metrics_addr', $data)) {
            $values = [];
            foreach ($data['metrics_addr'] as $value) {
                $values[] = $value;
            }
            $object->setMetricsAddr($values);
            unset($data['metrics_addr']);
        }
        foreach ($data as $key => $value_1) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value_1;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('dataDir') && null !== $data->getDataDir()) {
            $dataArray['data-dir'] = $data->getDataDir();
        }
        if ($data->isInitialized('disableConfigValidation') && null !== $data->getDisableConfigValidation()) {
            $dataArray['disable-config-validation'] = $data->getDisableConfigValidation();
        }
        if ($data->isInitialized('rpc') && null !== $data->getRpc()) {
            $dataArray['rpc'] = $this->normalizer->normalize($data->getRpc(), 'json', $context);
        }
        if ($data->isInitialized('p2p') && null !== $data->getP2p()) {
            $dataArray['p2p'] = $this->normalizer->normalize($data->getP2p(), 'json', $context);
        }
        if ($data->isInitialized('log') && null !== $data->getLog()) {
            $dataArray['log'] = $this->normalizer->normalize($data->getLog(), 'json', $context);
        }
        if ($data->isInitialized('internalEvents') && null !== $data->getInternalEvents()) {
            $dataArray['internal-events'] = $data->getInternalEvents();
        }
        if ($data->isInitialized('shell') && null !== $data->getShell()) {
            $dataArray['shell'] = $this->normalizer->normalize($data->getShell(), 'json', $context);
        }
        if ($data->isInitialized('network') && null !== $data->getNetwork()) {
            $dataArray['network'] = $data->getNetwork();
        }
        if ($data->isInitialized('metricsAddr') && null !== $data->getMetricsAddr()) {
            $values = [];
            foreach ($data->getMetricsAddr() as $value) {
                $values[] = $value;
            }
            $dataArray['metrics_addr'] = $values;
        }
        foreach ($data as $key => $value_1) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value_1;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Pezos\Generated\Shell\Model\ConfigGetResponse200::class => false];
    }
}

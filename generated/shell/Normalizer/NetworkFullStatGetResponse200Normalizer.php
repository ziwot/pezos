<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Pezos\Generated\Shell\Normalizer;

use Jane\Component\JsonSchemaRuntime\Reference;
use Pezos\Generated\Shell\Runtime\Normalizer\CheckArray;
use Pezos\Generated\Shell\Runtime\Normalizer\ValidatorTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class NetworkFullStatGetResponse200Normalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Pezos\Generated\Shell\Model\NetworkFullStatGetResponse200::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Pezos\Generated\Shell\Model\NetworkFullStatGetResponse200::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Pezos\Generated\Shell\Model\NetworkFullStatGetResponse200();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('stat', $data)) {
            $object->setStat($this->denormalizer->denormalize($data['stat'], \Pezos\Generated\Shell\Model\P2pStat::class, 'json', $context));
            unset($data['stat']);
        }
        if (\array_key_exists('incoming_connections', $data)) {
            $values = [];
            foreach ($data['incoming_connections'] as $value) {
                $values[] = $this->denormalizer->denormalize($value, \Pezos\Generated\Shell\Model\NetworkFullStatGetResponse200IncomingConnectionsItem::class, 'json', $context);
            }
            $object->setIncomingConnections($values);
            unset($data['incoming_connections']);
        }
        if (\array_key_exists('outgoing_connections', $data)) {
            $values_1 = [];
            foreach ($data['outgoing_connections'] as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, \Pezos\Generated\Shell\Model\NetworkFullStatGetResponse200OutgoingConnectionsItem::class, 'json', $context);
            }
            $object->setOutgoingConnections($values_1);
            unset($data['outgoing_connections']);
        }
        if (\array_key_exists('peers', $data)) {
            $values_2 = [];
            foreach ($data['peers'] as $value_2) {
                $values_3 = [];
                foreach ($value_2 as $value_3) {
                    $values_3[] = $value_3;
                }
                $values_2[] = $values_3;
            }
            $object->setPeers($values_2);
            unset($data['peers']);
        }
        if (\array_key_exists('points', $data)) {
            $values_4 = [];
            foreach ($data['points'] as $value_4) {
                $values_5 = [];
                foreach ($value_4 as $value_5) {
                    $values_5[] = $value_5;
                }
                $values_4[] = $values_5;
            }
            $object->setPoints($values_4);
            unset($data['points']);
        }
        foreach ($data as $key => $value_6) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value_6;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        $dataArray['stat'] = $this->normalizer->normalize($data->getStat(), 'json', $context);
        $values = [];
        foreach ($data->getIncomingConnections() as $value) {
            $values[] = $this->normalizer->normalize($value, 'json', $context);
        }
        $dataArray['incoming_connections'] = $values;
        $values_1 = [];
        foreach ($data->getOutgoingConnections() as $value_1) {
            $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
        }
        $dataArray['outgoing_connections'] = $values_1;
        $values_2 = [];
        foreach ($data->getPeers() as $value_2) {
            $values_3 = [];
            foreach ($value_2 as $value_3) {
                $values_3[] = $value_3;
            }
            $values_2[] = $values_3;
        }
        $dataArray['peers'] = $values_2;
        $values_4 = [];
        foreach ($data->getPoints() as $value_4) {
            $values_5 = [];
            foreach ($value_4 as $value_5) {
                $values_5[] = $value_5;
            }
            $values_4[] = $values_5;
        }
        $dataArray['points'] = $values_4;
        foreach ($data as $key => $value_6) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value_6;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Pezos\Generated\Shell\Model\NetworkFullStatGetResponse200::class => false];
    }
}

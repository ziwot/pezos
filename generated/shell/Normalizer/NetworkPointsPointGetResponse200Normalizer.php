<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Pezos\Generated\Shell\Normalizer;

use Jane\Component\JsonSchemaRuntime\Reference;
use Pezos\Generated\Shell\Runtime\Normalizer\CheckArray;
use Pezos\Generated\Shell\Runtime\Normalizer\ValidatorTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class NetworkPointsPointGetResponse200Normalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Pezos\Generated\Shell\Model\NetworkPointsPointGetResponse200::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Pezos\Generated\Shell\Model\NetworkPointsPointGetResponse200::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Pezos\Generated\Shell\Model\NetworkPointsPointGetResponse200();
        if (\array_key_exists('trusted', $data) && \is_int($data['trusted'])) {
            $data['trusted'] = (bool) $data['trusted'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('trusted', $data)) {
            $object->setTrusted($data['trusted']);
            unset($data['trusted']);
        }
        if (\array_key_exists('greylisted_until', $data)) {
            $object->setGreylistedUntil($data['greylisted_until']);
            unset($data['greylisted_until']);
        }
        if (\array_key_exists('state', $data)) {
            $object->setState($data['state']);
            unset($data['state']);
        }
        if (\array_key_exists('p2p_peer_id', $data)) {
            $object->setP2pPeerId($data['p2p_peer_id']);
            unset($data['p2p_peer_id']);
        }
        if (\array_key_exists('last_failed_connection', $data)) {
            $object->setLastFailedConnection($data['last_failed_connection']);
            unset($data['last_failed_connection']);
        }
        if (\array_key_exists('last_rejected_connection', $data)) {
            $values = [];
            foreach ($data['last_rejected_connection'] as $value) {
                $values[] = $value;
            }
            $object->setLastRejectedConnection($values);
            unset($data['last_rejected_connection']);
        }
        if (\array_key_exists('last_established_connection', $data)) {
            $values_1 = [];
            foreach ($data['last_established_connection'] as $value_1) {
                $values_1[] = $value_1;
            }
            $object->setLastEstablishedConnection($values_1);
            unset($data['last_established_connection']);
        }
        if (\array_key_exists('last_disconnection', $data)) {
            $values_2 = [];
            foreach ($data['last_disconnection'] as $value_2) {
                $values_2[] = $value_2;
            }
            $object->setLastDisconnection($values_2);
            unset($data['last_disconnection']);
        }
        if (\array_key_exists('last_seen', $data)) {
            $values_3 = [];
            foreach ($data['last_seen'] as $value_3) {
                $values_3[] = $value_3;
            }
            $object->setLastSeen($values_3);
            unset($data['last_seen']);
        }
        if (\array_key_exists('last_miss', $data)) {
            $object->setLastMiss($data['last_miss']);
            unset($data['last_miss']);
        }
        if (\array_key_exists('expected_peer_id', $data)) {
            $object->setExpectedPeerId($data['expected_peer_id']);
            unset($data['expected_peer_id']);
        }
        foreach ($data as $key => $value_4) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value_4;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        $dataArray['trusted'] = $data->getTrusted();
        if ($data->isInitialized('greylistedUntil') && null !== $data->getGreylistedUntil()) {
            $dataArray['greylisted_until'] = $data->getGreylistedUntil();
        }
        $dataArray['state'] = $data->getState();
        if ($data->isInitialized('p2pPeerId') && null !== $data->getP2pPeerId()) {
            $dataArray['p2p_peer_id'] = $data->getP2pPeerId();
        }
        if ($data->isInitialized('lastFailedConnection') && null !== $data->getLastFailedConnection()) {
            $dataArray['last_failed_connection'] = $data->getLastFailedConnection();
        }
        if ($data->isInitialized('lastRejectedConnection') && null !== $data->getLastRejectedConnection()) {
            $values = [];
            foreach ($data->getLastRejectedConnection() as $value) {
                $values[] = $value;
            }
            $dataArray['last_rejected_connection'] = $values;
        }
        if ($data->isInitialized('lastEstablishedConnection') && null !== $data->getLastEstablishedConnection()) {
            $values_1 = [];
            foreach ($data->getLastEstablishedConnection() as $value_1) {
                $values_1[] = $value_1;
            }
            $dataArray['last_established_connection'] = $values_1;
        }
        if ($data->isInitialized('lastDisconnection') && null !== $data->getLastDisconnection()) {
            $values_2 = [];
            foreach ($data->getLastDisconnection() as $value_2) {
                $values_2[] = $value_2;
            }
            $dataArray['last_disconnection'] = $values_2;
        }
        if ($data->isInitialized('lastSeen') && null !== $data->getLastSeen()) {
            $values_3 = [];
            foreach ($data->getLastSeen() as $value_3) {
                $values_3[] = $value_3;
            }
            $dataArray['last_seen'] = $values_3;
        }
        if ($data->isInitialized('lastMiss') && null !== $data->getLastMiss()) {
            $dataArray['last_miss'] = $data->getLastMiss();
        }
        if ($data->isInitialized('expectedPeerId') && null !== $data->getExpectedPeerId()) {
            $dataArray['expected_peer_id'] = $data->getExpectedPeerId();
        }
        foreach ($data as $key => $value_4) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value_4;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Pezos\Generated\Shell\Model\NetworkPointsPointGetResponse200::class => false];
    }
}

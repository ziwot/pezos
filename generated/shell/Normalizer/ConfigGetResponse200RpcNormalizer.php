<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Pezos\Generated\Shell\Normalizer;

use Jane\Component\JsonSchemaRuntime\Reference;
use Pezos\Generated\Shell\Runtime\Normalizer\CheckArray;
use Pezos\Generated\Shell\Runtime\Normalizer\ValidatorTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ConfigGetResponse200RpcNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Pezos\Generated\Shell\Model\ConfigGetResponse200Rpc::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Pezos\Generated\Shell\Model\ConfigGetResponse200Rpc::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Pezos\Generated\Shell\Model\ConfigGetResponse200Rpc();
        if (\array_key_exists('enable-http-cache-headers', $data) && \is_int($data['enable-http-cache-headers'])) {
            $data['enable-http-cache-headers'] = (bool) $data['enable-http-cache-headers'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('listen-addrs', $data)) {
            $values = [];
            foreach ($data['listen-addrs'] as $value) {
                $values[] = $value;
            }
            $object->setListenAddrs($values);
            unset($data['listen-addrs']);
        }
        if (\array_key_exists('external-listen-addrs', $data)) {
            $values_1 = [];
            foreach ($data['external-listen-addrs'] as $value_1) {
                $values_1[] = $value_1;
            }
            $object->setExternalListenAddrs($values_1);
            unset($data['external-listen-addrs']);
        }
        if (\array_key_exists('listen-addr', $data)) {
            $object->setListenAddr($data['listen-addr']);
            unset($data['listen-addr']);
        }
        if (\array_key_exists('cors-origin', $data)) {
            $values_2 = [];
            foreach ($data['cors-origin'] as $value_2) {
                $values_2[] = $value_2;
            }
            $object->setCorsOrigin($values_2);
            unset($data['cors-origin']);
        }
        if (\array_key_exists('cors-headers', $data)) {
            $values_3 = [];
            foreach ($data['cors-headers'] as $value_3) {
                $values_3[] = $value_3;
            }
            $object->setCorsHeaders($values_3);
            unset($data['cors-headers']);
        }
        if (\array_key_exists('crt', $data)) {
            $object->setCrt($data['crt']);
            unset($data['crt']);
        }
        if (\array_key_exists('key', $data)) {
            $object->setKey($data['key']);
            unset($data['key']);
        }
        if (\array_key_exists('acl', $data)) {
            $values_4 = [];
            foreach ($data['acl'] as $value_4) {
                $values_4[] = $value_4;
            }
            $object->setAcl($values_4);
            unset($data['acl']);
        }
        if (\array_key_exists('media-type', $data)) {
            $object->setMediaType($data['media-type']);
            unset($data['media-type']);
        }
        if (\array_key_exists('max_active_rpc_connections', $data)) {
            $object->setMaxActiveRpcConnections($data['max_active_rpc_connections']);
            unset($data['max_active_rpc_connections']);
        }
        if (\array_key_exists('enable-http-cache-headers', $data)) {
            $object->setEnableHttpCacheHeaders($data['enable-http-cache-headers']);
            unset($data['enable-http-cache-headers']);
        }
        foreach ($data as $key => $value_5) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value_5;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('listenAddrs') && null !== $data->getListenAddrs()) {
            $values = [];
            foreach ($data->getListenAddrs() as $value) {
                $values[] = $value;
            }
            $dataArray['listen-addrs'] = $values;
        }
        if ($data->isInitialized('externalListenAddrs') && null !== $data->getExternalListenAddrs()) {
            $values_1 = [];
            foreach ($data->getExternalListenAddrs() as $value_1) {
                $values_1[] = $value_1;
            }
            $dataArray['external-listen-addrs'] = $values_1;
        }
        if ($data->isInitialized('listenAddr') && null !== $data->getListenAddr()) {
            $dataArray['listen-addr'] = $data->getListenAddr();
        }
        if ($data->isInitialized('corsOrigin') && null !== $data->getCorsOrigin()) {
            $values_2 = [];
            foreach ($data->getCorsOrigin() as $value_2) {
                $values_2[] = $value_2;
            }
            $dataArray['cors-origin'] = $values_2;
        }
        if ($data->isInitialized('corsHeaders') && null !== $data->getCorsHeaders()) {
            $values_3 = [];
            foreach ($data->getCorsHeaders() as $value_3) {
                $values_3[] = $value_3;
            }
            $dataArray['cors-headers'] = $values_3;
        }
        if ($data->isInitialized('crt') && null !== $data->getCrt()) {
            $dataArray['crt'] = $data->getCrt();
        }
        if ($data->isInitialized('key') && null !== $data->getKey()) {
            $dataArray['key'] = $data->getKey();
        }
        if ($data->isInitialized('acl') && null !== $data->getAcl()) {
            $values_4 = [];
            foreach ($data->getAcl() as $value_4) {
                $values_4[] = $value_4;
            }
            $dataArray['acl'] = $values_4;
        }
        if ($data->isInitialized('mediaType') && null !== $data->getMediaType()) {
            $dataArray['media-type'] = $data->getMediaType();
        }
        if ($data->isInitialized('maxActiveRpcConnections') && null !== $data->getMaxActiveRpcConnections()) {
            $dataArray['max_active_rpc_connections'] = $data->getMaxActiveRpcConnections();
        }
        if ($data->isInitialized('enableHttpCacheHeaders') && null !== $data->getEnableHttpCacheHeaders()) {
            $dataArray['enable-http-cache-headers'] = $data->getEnableHttpCacheHeaders();
        }
        foreach ($data as $key => $value_5) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value_5;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Pezos\Generated\Shell\Model\ConfigGetResponse200Rpc::class => false];
    }
}

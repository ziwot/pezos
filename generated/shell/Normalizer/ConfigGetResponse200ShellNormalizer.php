<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Pezos\Generated\Shell\Normalizer;

use Jane\Component\JsonSchemaRuntime\Reference;
use Pezos\Generated\Shell\Runtime\Normalizer\CheckArray;
use Pezos\Generated\Shell\Runtime\Normalizer\ValidatorTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ConfigGetResponse200ShellNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Pezos\Generated\Shell\Model\ConfigGetResponse200Shell::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Pezos\Generated\Shell\Model\ConfigGetResponse200Shell::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Pezos\Generated\Shell\Model\ConfigGetResponse200Shell();
        if (\array_key_exists('disable_context_pruning', $data) && \is_int($data['disable_context_pruning'])) {
            $data['disable_context_pruning'] = (bool) $data['disable_context_pruning'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('peer_validator', $data)) {
            $object->setPeerValidator($this->denormalizer->denormalize($data['peer_validator'], \Pezos\Generated\Shell\Model\ConfigGetResponse200ShellPeerValidator::class, 'json', $context));
            unset($data['peer_validator']);
        }
        if (\array_key_exists('block_validator', $data)) {
            $object->setBlockValidator($this->denormalizer->denormalize($data['block_validator'], \Pezos\Generated\Shell\Model\ConfigGetResponse200ShellBlockValidator::class, 'json', $context));
            unset($data['block_validator']);
        }
        if (\array_key_exists('prevalidator', $data)) {
            $object->setPrevalidator($this->denormalizer->denormalize($data['prevalidator'], \Pezos\Generated\Shell\Model\ConfigGetResponse200ShellPrevalidator::class, 'json', $context));
            unset($data['prevalidator']);
        }
        if (\array_key_exists('chain_validator', $data)) {
            $object->setChainValidator($data['chain_validator']);
            unset($data['chain_validator']);
        }
        if (\array_key_exists('history_mode', $data)) {
            $object->setHistoryMode($data['history_mode']);
            unset($data['history_mode']);
        }
        if (\array_key_exists('disable_context_pruning', $data)) {
            $object->setDisableContextPruning($data['disable_context_pruning']);
            unset($data['disable_context_pruning']);
        }
        if (\array_key_exists('storage_maintenance_delay', $data)) {
            $object->setStorageMaintenanceDelay($data['storage_maintenance_delay']);
            unset($data['storage_maintenance_delay']);
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('peerValidator') && null !== $data->getPeerValidator()) {
            $dataArray['peer_validator'] = $this->normalizer->normalize($data->getPeerValidator(), 'json', $context);
        }
        if ($data->isInitialized('blockValidator') && null !== $data->getBlockValidator()) {
            $dataArray['block_validator'] = $this->normalizer->normalize($data->getBlockValidator(), 'json', $context);
        }
        if ($data->isInitialized('prevalidator') && null !== $data->getPrevalidator()) {
            $dataArray['prevalidator'] = $this->normalizer->normalize($data->getPrevalidator(), 'json', $context);
        }
        if ($data->isInitialized('chainValidator') && null !== $data->getChainValidator()) {
            $dataArray['chain_validator'] = $data->getChainValidator();
        }
        if ($data->isInitialized('historyMode') && null !== $data->getHistoryMode()) {
            $dataArray['history_mode'] = $data->getHistoryMode();
        }
        if ($data->isInitialized('disableContextPruning') && null !== $data->getDisableContextPruning()) {
            $dataArray['disable_context_pruning'] = $data->getDisableContextPruning();
        }
        if ($data->isInitialized('storageMaintenanceDelay') && null !== $data->getStorageMaintenanceDelay()) {
            $dataArray['storage_maintenance_delay'] = $data->getStorageMaintenanceDelay();
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Pezos\Generated\Shell\Model\ConfigGetResponse200Shell::class => false];
    }
}

<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Pezos\Generated\Shell\Normalizer;

use Jane\Component\JsonSchemaRuntime\Reference;
use Pezos\Generated\Shell\Runtime\Normalizer\CheckArray;
use Pezos\Generated\Shell\Runtime\Normalizer\ValidatorTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class NetworkConnectionsPeerIdGetResponse200Normalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Pezos\Generated\Shell\Model\NetworkConnectionsPeerIdGetResponse200::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Pezos\Generated\Shell\Model\NetworkConnectionsPeerIdGetResponse200::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Pezos\Generated\Shell\Model\NetworkConnectionsPeerIdGetResponse200();
        if (\array_key_exists('incoming', $data) && \is_int($data['incoming'])) {
            $data['incoming'] = (bool) $data['incoming'];
        }
        if (\array_key_exists('private', $data) && \is_int($data['private'])) {
            $data['private'] = (bool) $data['private'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('incoming', $data)) {
            $object->setIncoming($data['incoming']);
            unset($data['incoming']);
        }
        if (\array_key_exists('peer_id', $data)) {
            $object->setPeerId($data['peer_id']);
            unset($data['peer_id']);
        }
        if (\array_key_exists('id_point', $data)) {
            $object->setIdPoint($this->denormalizer->denormalize($data['id_point'], \Pezos\Generated\Shell\Model\P2pConnectionId::class, 'json', $context));
            unset($data['id_point']);
        }
        if (\array_key_exists('remote_socket_port', $data)) {
            $object->setRemoteSocketPort($data['remote_socket_port']);
            unset($data['remote_socket_port']);
        }
        if (\array_key_exists('announced_version', $data)) {
            $object->setAnnouncedVersion($this->denormalizer->denormalize($data['announced_version'], \Pezos\Generated\Shell\Model\NetworkVersion::class, 'json', $context));
            unset($data['announced_version']);
        }
        if (\array_key_exists('private', $data)) {
            $object->setPrivate($data['private']);
            unset($data['private']);
        }
        if (\array_key_exists('local_metadata', $data)) {
            $object->setLocalMetadata($this->denormalizer->denormalize($data['local_metadata'], \Pezos\Generated\Shell\Model\NetworkConnectionsPeerIdGetResponse200LocalMetadata::class, 'json', $context));
            unset($data['local_metadata']);
        }
        if (\array_key_exists('remote_metadata', $data)) {
            $object->setRemoteMetadata($this->denormalizer->denormalize($data['remote_metadata'], \Pezos\Generated\Shell\Model\NetworkConnectionsPeerIdGetResponse200RemoteMetadata::class, 'json', $context));
            unset($data['remote_metadata']);
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        $dataArray['incoming'] = $data->getIncoming();
        $dataArray['peer_id'] = $data->getPeerId();
        $dataArray['id_point'] = $this->normalizer->normalize($data->getIdPoint(), 'json', $context);
        $dataArray['remote_socket_port'] = $data->getRemoteSocketPort();
        $dataArray['announced_version'] = $this->normalizer->normalize($data->getAnnouncedVersion(), 'json', $context);
        $dataArray['private'] = $data->getPrivate();
        $dataArray['local_metadata'] = $this->normalizer->normalize($data->getLocalMetadata(), 'json', $context);
        $dataArray['remote_metadata'] = $this->normalizer->normalize($data->getRemoteMetadata(), 'json', $context);
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Pezos\Generated\Shell\Model\NetworkConnectionsPeerIdGetResponse200::class => false];
    }
}

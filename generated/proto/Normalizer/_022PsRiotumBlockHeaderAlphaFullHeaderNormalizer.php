<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Pezos\Generated\Proto\Normalizer;

use Jane\Component\JsonSchemaRuntime\Reference;
use Pezos\Generated\Proto\Runtime\Normalizer\CheckArray;
use Pezos\Generated\Proto\Runtime\Normalizer\ValidatorTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class _022PsRiotumBlockHeaderAlphaFullHeaderNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Pezos\Generated\Proto\Model\_022PsRiotumBlockHeaderAlphaFullHeader::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Pezos\Generated\Proto\Model\_022PsRiotumBlockHeaderAlphaFullHeader::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Pezos\Generated\Proto\Model\_022PsRiotumBlockHeaderAlphaFullHeader();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('level', $data)) {
            $object->setLevel($data['level']);
            unset($data['level']);
        }
        if (\array_key_exists('proto', $data)) {
            $object->setProto($data['proto']);
            unset($data['proto']);
        }
        if (\array_key_exists('predecessor', $data)) {
            $object->setPredecessor($data['predecessor']);
            unset($data['predecessor']);
        }
        if (\array_key_exists('timestamp', $data)) {
            $object->setTimestamp($data['timestamp']);
            unset($data['timestamp']);
        }
        if (\array_key_exists('validation_pass', $data)) {
            $object->setValidationPass($data['validation_pass']);
            unset($data['validation_pass']);
        }
        if (\array_key_exists('operations_hash', $data)) {
            $object->setOperationsHash($data['operations_hash']);
            unset($data['operations_hash']);
        }
        if (\array_key_exists('fitness', $data)) {
            $values = [];
            foreach ($data['fitness'] as $value) {
                $values[] = $value;
            }
            $object->setFitness($values);
            unset($data['fitness']);
        }
        if (\array_key_exists('context', $data)) {
            $object->setContext($data['context']);
            unset($data['context']);
        }
        if (\array_key_exists('payload_hash', $data)) {
            $object->setPayloadHash($data['payload_hash']);
            unset($data['payload_hash']);
        }
        if (\array_key_exists('payload_round', $data)) {
            $object->setPayloadRound($data['payload_round']);
            unset($data['payload_round']);
        }
        if (\array_key_exists('proof_of_work_nonce', $data)) {
            $object->setProofOfWorkNonce($data['proof_of_work_nonce']);
            unset($data['proof_of_work_nonce']);
        }
        if (\array_key_exists('seed_nonce_hash', $data)) {
            $object->setSeedNonceHash($data['seed_nonce_hash']);
            unset($data['seed_nonce_hash']);
        }
        if (\array_key_exists('liquidity_baking_toggle_vote', $data)) {
            $object->setLiquidityBakingToggleVote($data['liquidity_baking_toggle_vote']);
            unset($data['liquidity_baking_toggle_vote']);
        }
        if (\array_key_exists('adaptive_issuance_vote', $data)) {
            $object->setAdaptiveIssuanceVote($data['adaptive_issuance_vote']);
            unset($data['adaptive_issuance_vote']);
        }
        if (\array_key_exists('signature', $data)) {
            $object->setSignature($data['signature']);
            unset($data['signature']);
        }
        foreach ($data as $key => $value_1) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value_1;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        $dataArray['level'] = $data->getLevel();
        $dataArray['proto'] = $data->getProto();
        $dataArray['predecessor'] = $data->getPredecessor();
        $dataArray['timestamp'] = $data->getTimestamp();
        $dataArray['validation_pass'] = $data->getValidationPass();
        $dataArray['operations_hash'] = $data->getOperationsHash();
        $values = [];
        foreach ($data->getFitness() as $value) {
            $values[] = $value;
        }
        $dataArray['fitness'] = $values;
        $dataArray['context'] = $data->getContext();
        $dataArray['payload_hash'] = $data->getPayloadHash();
        $dataArray['payload_round'] = $data->getPayloadRound();
        $dataArray['proof_of_work_nonce'] = $data->getProofOfWorkNonce();
        if ($data->isInitialized('seedNonceHash') && null !== $data->getSeedNonceHash()) {
            $dataArray['seed_nonce_hash'] = $data->getSeedNonceHash();
        }
        $dataArray['liquidity_baking_toggle_vote'] = $data->getLiquidityBakingToggleVote();
        $dataArray['adaptive_issuance_vote'] = $data->getAdaptiveIssuanceVote();
        $dataArray['signature'] = $data->getSignature();
        foreach ($data as $key => $value_1) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value_1;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Pezos\Generated\Proto\Model\_022PsRiotumBlockHeaderAlphaFullHeader::class => false];
    }
}

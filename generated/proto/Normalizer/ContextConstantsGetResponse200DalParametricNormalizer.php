<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Pezos\Generated\Proto\Normalizer;

use Jane\Component\JsonSchemaRuntime\Reference;
use Pezos\Generated\Proto\Runtime\Normalizer\CheckArray;
use Pezos\Generated\Proto\Runtime\Normalizer\ValidatorTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ContextConstantsGetResponse200DalParametricNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Pezos\Generated\Proto\Model\ContextConstantsGetResponse200DalParametric::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Pezos\Generated\Proto\Model\ContextConstantsGetResponse200DalParametric::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Pezos\Generated\Proto\Model\ContextConstantsGetResponse200DalParametric();
        if (\array_key_exists('feature_enable', $data) && \is_int($data['feature_enable'])) {
            $data['feature_enable'] = (bool) $data['feature_enable'];
        }
        if (\array_key_exists('incentives_enable', $data) && \is_int($data['incentives_enable'])) {
            $data['incentives_enable'] = (bool) $data['incentives_enable'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('feature_enable', $data)) {
            $object->setFeatureEnable($data['feature_enable']);
            unset($data['feature_enable']);
        }
        if (\array_key_exists('incentives_enable', $data)) {
            $object->setIncentivesEnable($data['incentives_enable']);
            unset($data['incentives_enable']);
        }
        if (\array_key_exists('number_of_slots', $data)) {
            $object->setNumberOfSlots($data['number_of_slots']);
            unset($data['number_of_slots']);
        }
        if (\array_key_exists('attestation_lag', $data)) {
            $object->setAttestationLag($data['attestation_lag']);
            unset($data['attestation_lag']);
        }
        if (\array_key_exists('attestation_threshold', $data)) {
            $object->setAttestationThreshold($data['attestation_threshold']);
            unset($data['attestation_threshold']);
        }
        if (\array_key_exists('minimal_participation_ratio', $data)) {
            $object->setMinimalParticipationRatio($this->denormalizer->denormalize($data['minimal_participation_ratio'], \Pezos\Generated\Proto\Model\ContextConstantsGetResponse200DalParametricMinimalParticipationRatio::class, 'json', $context));
            unset($data['minimal_participation_ratio']);
        }
        if (\array_key_exists('rewards_ratio', $data)) {
            $object->setRewardsRatio($this->denormalizer->denormalize($data['rewards_ratio'], \Pezos\Generated\Proto\Model\ContextConstantsGetResponse200DalParametricRewardsRatio::class, 'json', $context));
            unset($data['rewards_ratio']);
        }
        if (\array_key_exists('traps_fraction', $data)) {
            $object->setTrapsFraction($this->denormalizer->denormalize($data['traps_fraction'], \Pezos\Generated\Proto\Model\ContextConstantsGetResponse200DalParametricTrapsFraction::class, 'json', $context));
            unset($data['traps_fraction']);
        }
        if (\array_key_exists('redundancy_factor', $data)) {
            $object->setRedundancyFactor($data['redundancy_factor']);
            unset($data['redundancy_factor']);
        }
        if (\array_key_exists('page_size', $data)) {
            $object->setPageSize($data['page_size']);
            unset($data['page_size']);
        }
        if (\array_key_exists('slot_size', $data)) {
            $object->setSlotSize($data['slot_size']);
            unset($data['slot_size']);
        }
        if (\array_key_exists('number_of_shards', $data)) {
            $object->setNumberOfShards($data['number_of_shards']);
            unset($data['number_of_shards']);
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        $dataArray['feature_enable'] = $data->getFeatureEnable();
        $dataArray['incentives_enable'] = $data->getIncentivesEnable();
        $dataArray['number_of_slots'] = $data->getNumberOfSlots();
        $dataArray['attestation_lag'] = $data->getAttestationLag();
        $dataArray['attestation_threshold'] = $data->getAttestationThreshold();
        $dataArray['minimal_participation_ratio'] = $this->normalizer->normalize($data->getMinimalParticipationRatio(), 'json', $context);
        $dataArray['rewards_ratio'] = $this->normalizer->normalize($data->getRewardsRatio(), 'json', $context);
        $dataArray['traps_fraction'] = $this->normalizer->normalize($data->getTrapsFraction(), 'json', $context);
        $dataArray['redundancy_factor'] = $data->getRedundancyFactor();
        $dataArray['page_size'] = $data->getPageSize();
        $dataArray['slot_size'] = $data->getSlotSize();
        $dataArray['number_of_shards'] = $data->getNumberOfShards();
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Pezos\Generated\Proto\Model\ContextConstantsGetResponse200DalParametric::class => false];
    }
}

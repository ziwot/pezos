<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Pezos\Generated\Proto\Normalizer;

use Jane\Component\JsonSchemaRuntime\Reference;
use Pezos\Generated\Proto\Runtime\Normalizer\CheckArray;
use Pezos\Generated\Proto\Runtime\Normalizer\ValidatorTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class HelpersScriptsNormalizeStackPostBodyNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Pezos\Generated\Proto\Model\HelpersScriptsNormalizeStackPostBody::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Pezos\Generated\Proto\Model\HelpersScriptsNormalizeStackPostBody::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Pezos\Generated\Proto\Model\HelpersScriptsNormalizeStackPostBody();
        if (\array_key_exists('legacy', $data) && \is_int($data['legacy'])) {
            $data['legacy'] = (bool) $data['legacy'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('input', $data)) {
            $values = [];
            foreach ($data['input'] as $value) {
                $values[] = $this->denormalizer->denormalize($value, \Pezos\Generated\Proto\Model\HelpersScriptsNormalizeStackPostBodyInputItem::class, 'json', $context);
            }
            $object->setInput($values);
            unset($data['input']);
        }
        if (\array_key_exists('unparsing_mode', $data)) {
            $object->setUnparsingMode($data['unparsing_mode']);
            unset($data['unparsing_mode']);
        }
        if (\array_key_exists('legacy', $data)) {
            $object->setLegacy($data['legacy']);
            unset($data['legacy']);
        }
        if (\array_key_exists('other_contracts', $data)) {
            $values_1 = [];
            foreach ($data['other_contracts'] as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, \Pezos\Generated\Proto\Model\HelpersScriptsNormalizeStackPostBodyOtherContractsItem::class, 'json', $context);
            }
            $object->setOtherContracts($values_1);
            unset($data['other_contracts']);
        }
        if (\array_key_exists('extra_big_maps', $data)) {
            $values_2 = [];
            foreach ($data['extra_big_maps'] as $value_2) {
                $values_2[] = $this->denormalizer->denormalize($value_2, \Pezos\Generated\Proto\Model\HelpersScriptsNormalizeStackPostBodyExtraBigMapsItem::class, 'json', $context);
            }
            $object->setExtraBigMaps($values_2);
            unset($data['extra_big_maps']);
        }
        foreach ($data as $key => $value_3) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value_3;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        $values = [];
        foreach ($data->getInput() as $value) {
            $values[] = $this->normalizer->normalize($value, 'json', $context);
        }
        $dataArray['input'] = $values;
        $dataArray['unparsing_mode'] = $data->getUnparsingMode();
        if ($data->isInitialized('legacy') && null !== $data->getLegacy()) {
            $dataArray['legacy'] = $data->getLegacy();
        }
        if ($data->isInitialized('otherContracts') && null !== $data->getOtherContracts()) {
            $values_1 = [];
            foreach ($data->getOtherContracts() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $dataArray['other_contracts'] = $values_1;
        }
        if ($data->isInitialized('extraBigMaps') && null !== $data->getExtraBigMaps()) {
            $values_2 = [];
            foreach ($data->getExtraBigMaps() as $value_2) {
                $values_2[] = $this->normalizer->normalize($value_2, 'json', $context);
            }
            $dataArray['extra_big_maps'] = $values_2;
        }
        foreach ($data as $key => $value_3) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value_3;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Pezos\Generated\Proto\Model\HelpersScriptsNormalizeStackPostBody::class => false];
    }
}

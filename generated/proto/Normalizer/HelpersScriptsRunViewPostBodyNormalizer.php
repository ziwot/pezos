<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Pezos\Generated\Proto\Normalizer;

use Jane\Component\JsonSchemaRuntime\Reference;
use Pezos\Generated\Proto\Runtime\Normalizer\CheckArray;
use Pezos\Generated\Proto\Runtime\Normalizer\ValidatorTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class HelpersScriptsRunViewPostBodyNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Pezos\Generated\Proto\Model\HelpersScriptsRunViewPostBody::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Pezos\Generated\Proto\Model\HelpersScriptsRunViewPostBody::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Pezos\Generated\Proto\Model\HelpersScriptsRunViewPostBody();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('contract', $data)) {
            $object->setContract($data['contract']);
            unset($data['contract']);
        }
        if (\array_key_exists('entrypoint', $data)) {
            $object->setEntrypoint($data['entrypoint']);
            unset($data['entrypoint']);
        }
        if (\array_key_exists('input', $data)) {
            $object->setInput($data['input']);
            unset($data['input']);
        }
        if (\array_key_exists('chain_id', $data)) {
            $object->setChainId($data['chain_id']);
            unset($data['chain_id']);
        }
        if (\array_key_exists('source', $data)) {
            $object->setSource($data['source']);
            unset($data['source']);
        }
        if (\array_key_exists('payer', $data)) {
            $object->setPayer($data['payer']);
            unset($data['payer']);
        }
        if (\array_key_exists('gas', $data)) {
            $object->setGas($data['gas']);
            unset($data['gas']);
        }
        if (\array_key_exists('unparsing_mode', $data)) {
            $object->setUnparsingMode($data['unparsing_mode']);
            unset($data['unparsing_mode']);
        }
        if (\array_key_exists('now', $data)) {
            $object->setNow($data['now']);
            unset($data['now']);
        }
        if (\array_key_exists('level', $data)) {
            $object->setLevel($data['level']);
            unset($data['level']);
        }
        if (\array_key_exists('other_contracts', $data)) {
            $values = [];
            foreach ($data['other_contracts'] as $value) {
                $values[] = $this->denormalizer->denormalize($value, \Pezos\Generated\Proto\Model\HelpersScriptsRunViewPostBodyOtherContractsItem::class, 'json', $context);
            }
            $object->setOtherContracts($values);
            unset($data['other_contracts']);
        }
        if (\array_key_exists('extra_big_maps', $data)) {
            $values_1 = [];
            foreach ($data['extra_big_maps'] as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, \Pezos\Generated\Proto\Model\HelpersScriptsRunViewPostBodyExtraBigMapsItem::class, 'json', $context);
            }
            $object->setExtraBigMaps($values_1);
            unset($data['extra_big_maps']);
        }
        foreach ($data as $key => $value_2) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value_2;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        $dataArray['contract'] = $data->getContract();
        $dataArray['entrypoint'] = $data->getEntrypoint();
        $dataArray['input'] = $data->getInput();
        $dataArray['chain_id'] = $data->getChainId();
        if ($data->isInitialized('source') && null !== $data->getSource()) {
            $dataArray['source'] = $data->getSource();
        }
        if ($data->isInitialized('payer') && null !== $data->getPayer()) {
            $dataArray['payer'] = $data->getPayer();
        }
        if ($data->isInitialized('gas') && null !== $data->getGas()) {
            $dataArray['gas'] = $data->getGas();
        }
        $dataArray['unparsing_mode'] = $data->getUnparsingMode();
        if ($data->isInitialized('now') && null !== $data->getNow()) {
            $dataArray['now'] = $data->getNow();
        }
        if ($data->isInitialized('level') && null !== $data->getLevel()) {
            $dataArray['level'] = $data->getLevel();
        }
        if ($data->isInitialized('otherContracts') && null !== $data->getOtherContracts()) {
            $values = [];
            foreach ($data->getOtherContracts() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $dataArray['other_contracts'] = $values;
        }
        if ($data->isInitialized('extraBigMaps') && null !== $data->getExtraBigMaps()) {
            $values_1 = [];
            foreach ($data->getExtraBigMaps() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $dataArray['extra_big_maps'] = $values_1;
        }
        foreach ($data as $key => $value_2) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value_2;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Pezos\Generated\Proto\Model\HelpersScriptsRunViewPostBody::class => false];
    }
}

<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Pezos\Generated\Rollup\Normalizer;

use Jane\Component\JsonSchemaRuntime\Reference;
use Pezos\Generated\Rollup\Runtime\Normalizer\CheckArray;
use Pezos\Generated\Rollup\Runtime\Normalizer\ValidatorTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class GlobalBlockBlockIdSimulatePostResponse200Normalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Pezos\Generated\Rollup\Model\GlobalBlockBlockIdSimulatePostResponse200::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Pezos\Generated\Rollup\Model\GlobalBlockBlockIdSimulatePostResponse200::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Pezos\Generated\Rollup\Model\GlobalBlockBlockIdSimulatePostResponse200();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('state_hash', $data)) {
            $object->setStateHash($data['state_hash']);
            unset($data['state_hash']);
        }
        if (\array_key_exists('status', $data)) {
            $object->setStatus($data['status']);
            unset($data['status']);
        }
        if (\array_key_exists('output', $data)) {
            $values = [];
            foreach ($data['output'] as $value) {
                $values[] = $this->denormalizer->denormalize($value, \Pezos\Generated\Rollup\Model\GlobalBlockBlockIdSimulatePostResponse200OutputItem::class, 'json', $context);
            }
            $object->setOutput($values);
            unset($data['output']);
        }
        if (\array_key_exists('inbox_level', $data)) {
            $object->setInboxLevel($data['inbox_level']);
            unset($data['inbox_level']);
        }
        if (\array_key_exists('num_ticks', $data)) {
            $object->setNumTicks($data['num_ticks']);
            unset($data['num_ticks']);
        }
        if (\array_key_exists('insights', $data)) {
            $values_1 = [];
            foreach ($data['insights'] as $value_1) {
                $values_1[] = $value_1;
            }
            $object->setInsights($values_1);
            unset($data['insights']);
        }
        foreach ($data as $key => $value_2) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value_2;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        $dataArray['state_hash'] = $data->getStateHash();
        $dataArray['status'] = $data->getStatus();
        $values = [];
        foreach ($data->getOutput() as $value) {
            $values[] = $this->normalizer->normalize($value, 'json', $context);
        }
        $dataArray['output'] = $values;
        $dataArray['inbox_level'] = $data->getInboxLevel();
        $dataArray['num_ticks'] = $data->getNumTicks();
        if ($data->isInitialized('insights') && null !== $data->getInsights()) {
            $values_1 = [];
            foreach ($data->getInsights() as $value_1) {
                $values_1[] = $value_1;
            }
            $dataArray['insights'] = $values_1;
        }
        foreach ($data as $key => $value_2) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value_2;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Pezos\Generated\Rollup\Model\GlobalBlockBlockIdSimulatePostResponse200::class => false];
    }
}

<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Pezos\Generated\Rollup\Normalizer;

use Jane\Component\JsonSchemaRuntime\Reference;
use Pezos\Generated\Rollup\Runtime\Normalizer\CheckArray;
use Pezos\Generated\Rollup\Runtime\Normalizer\ValidatorTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ConfigGetResponse200FeeParametersPublishNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Pezos\Generated\Rollup\Model\ConfigGetResponse200FeeParametersPublish::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Pezos\Generated\Rollup\Model\ConfigGetResponse200FeeParametersPublish::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Pezos\Generated\Rollup\Model\ConfigGetResponse200FeeParametersPublish();
        if (\array_key_exists('force-low-fee', $data) && \is_int($data['force-low-fee'])) {
            $data['force-low-fee'] = (bool) $data['force-low-fee'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('minimal-fees', $data)) {
            $object->setMinimalFees($data['minimal-fees']);
            unset($data['minimal-fees']);
        }
        if (\array_key_exists('minimal-nanotez-per-byte', $data)) {
            $object->setMinimalNanotezPerByte($data['minimal-nanotez-per-byte']);
            unset($data['minimal-nanotez-per-byte']);
        }
        if (\array_key_exists('minimal-nanotez-per-gas-unit', $data)) {
            $object->setMinimalNanotezPerGasUnit($data['minimal-nanotez-per-gas-unit']);
            unset($data['minimal-nanotez-per-gas-unit']);
        }
        if (\array_key_exists('force-low-fee', $data)) {
            $object->setForceLowFee($data['force-low-fee']);
            unset($data['force-low-fee']);
        }
        if (\array_key_exists('fee-cap', $data)) {
            $object->setFeeCap($data['fee-cap']);
            unset($data['fee-cap']);
        }
        if (\array_key_exists('burn-cap', $data)) {
            $object->setBurnCap($data['burn-cap']);
            unset($data['burn-cap']);
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('minimalFees') && null !== $data->getMinimalFees()) {
            $dataArray['minimal-fees'] = $data->getMinimalFees();
        }
        if ($data->isInitialized('minimalNanotezPerByte') && null !== $data->getMinimalNanotezPerByte()) {
            $dataArray['minimal-nanotez-per-byte'] = $data->getMinimalNanotezPerByte();
        }
        if ($data->isInitialized('minimalNanotezPerGasUnit') && null !== $data->getMinimalNanotezPerGasUnit()) {
            $dataArray['minimal-nanotez-per-gas-unit'] = $data->getMinimalNanotezPerGasUnit();
        }
        if ($data->isInitialized('forceLowFee') && null !== $data->getForceLowFee()) {
            $dataArray['force-low-fee'] = $data->getForceLowFee();
        }
        if ($data->isInitialized('feeCap') && null !== $data->getFeeCap()) {
            $dataArray['fee-cap'] = $data->getFeeCap();
        }
        if ($data->isInitialized('burnCap') && null !== $data->getBurnCap()) {
            $dataArray['burn-cap'] = $data->getBurnCap();
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Pezos\Generated\Rollup\Model\ConfigGetResponse200FeeParametersPublish::class => false];
    }
}

<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Pezos\Generated\Rollup\Normalizer;

use Jane\Component\JsonSchemaRuntime\Reference;
use Pezos\Generated\Rollup\Runtime\Normalizer\CheckArray;
use Pezos\Generated\Rollup\Runtime\Normalizer\ValidatorTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class GlobalBlockBlockIdSimulatePostBodyNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Pezos\Generated\Rollup\Model\GlobalBlockBlockIdSimulatePostBody::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Pezos\Generated\Rollup\Model\GlobalBlockBlockIdSimulatePostBody::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Pezos\Generated\Rollup\Model\GlobalBlockBlockIdSimulatePostBody();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('messages', $data)) {
            $values = [];
            foreach ($data['messages'] as $value) {
                $values[] = $value;
            }
            $object->setMessages($values);
            unset($data['messages']);
        }
        if (\array_key_exists('reveal_pages', $data)) {
            $values_1 = [];
            foreach ($data['reveal_pages'] as $value_1) {
                $values_1[] = $value_1;
            }
            $object->setRevealPages($values_1);
            unset($data['reveal_pages']);
        }
        if (\array_key_exists('insight_requests', $data)) {
            $values_2 = [];
            foreach ($data['insight_requests'] as $value_2) {
                $values_2[] = $value_2;
            }
            $object->setInsightRequests($values_2);
            unset($data['insight_requests']);
        }
        if (\array_key_exists('log_kernel_debug_file', $data)) {
            $object->setLogKernelDebugFile($data['log_kernel_debug_file']);
            unset($data['log_kernel_debug_file']);
        }
        foreach ($data as $key => $value_3) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value_3;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        $values = [];
        foreach ($data->getMessages() as $value) {
            $values[] = $value;
        }
        $dataArray['messages'] = $values;
        if ($data->isInitialized('revealPages') && null !== $data->getRevealPages()) {
            $values_1 = [];
            foreach ($data->getRevealPages() as $value_1) {
                $values_1[] = $value_1;
            }
            $dataArray['reveal_pages'] = $values_1;
        }
        if ($data->isInitialized('insightRequests') && null !== $data->getInsightRequests()) {
            $values_2 = [];
            foreach ($data->getInsightRequests() as $value_2) {
                $values_2[] = $value_2;
            }
            $dataArray['insight_requests'] = $values_2;
        }
        if ($data->isInitialized('logKernelDebugFile') && null !== $data->getLogKernelDebugFile()) {
            $dataArray['log_kernel_debug_file'] = $data->getLogKernelDebugFile();
        }
        foreach ($data as $key => $value_3) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value_3;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Pezos\Generated\Rollup\Model\GlobalBlockBlockIdSimulatePostBody::class => false];
    }
}

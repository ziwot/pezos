<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Pezos\Generated\Dal\Endpoint;

class GetProfilesByPkhAttestedLevelsByInt32AttestableSlot extends \Pezos\Generated\Dal\Runtime\Client\BaseEndpoint implements \Pezos\Generated\Dal\Runtime\Client\Endpoint
{
    use \Pezos\Generated\Dal\Runtime\Client\EndpointTrait;
    protected $pkh;
    protected $int32;

    /**
     * Return the currently attestable slots at the given attested level by the given public key hash. A slot is attestable at level [l] if it is published at level [l - attestation_lag] and *all* the shards assigned at level [l] to the given public key hash are available in the DAL node's store.
     *
     * @param string $pkh A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)
     */
    public function __construct(string $pkh, string $int32)
    {
        $this->pkh = $pkh;
        $this->int32 = $int32;
    }

    public function getMethod(): string
    {
        return 'GET';
    }

    public function getUri(): string
    {
        return str_replace(['{pkh}', '{int32}'], [$this->pkh, $this->int32], '/profiles/{pkh}/attested_levels/{int32}/attestable_slots');
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        return [[], null];
    }

    public function getExtraHeaders(): array
    {
        return ['Accept' => ['application/json']];
    }

    /**
     * @return null
     */
    protected function transformResponseBody(\Psr\Http\Message\ResponseInterface $response, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType = null)
    {
        $status = $response->getStatusCode();
        $body = (string) $response->getBody();
        if (is_null($contentType) === false && (200 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            return json_decode($body);
        }
        if (mb_strpos($contentType, 'application/json') !== false) {
            return json_decode($body);
        }
    }

    public function getAuthenticationScopes(): array
    {
        return [];
    }
}

<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Pezos\Generated\Dal\Endpoint;

class PostSlot extends \Pezos\Generated\Dal\Runtime\Client\BaseEndpoint implements \Pezos\Generated\Dal\Runtime\Client\Endpoint
{
    use \Pezos\Generated\Dal\Runtime\Client\EndpointTrait;

    /**
     * Post a slot to the DAL node, computes its commitment and commitment proof, then computes the correspoding shards with their proof. The result of this RPC can be directly used to publish a slot header. If the sent data is smaller than the size of a DAL slot, it is padded with the character provided as padding query parameter (defaults to \000). If the slot_index query parameter is provided, the DAL node checks that its profile allows to publish data on the given slot index.
     *
     * @param mixed|null $requestBody
     * @param array      $queryParameters {
     *
     * @var string $padding
     * @var string $slot_index
     *             }
     */
    public function __construct($requestBody = null, array $queryParameters = [])
    {
        $this->body = $requestBody;
        $this->queryParameters = $queryParameters;
    }

    public function getMethod(): string
    {
        return 'POST';
    }

    public function getUri(): string
    {
        return '/slots';
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        if (isset($this->body)) {
            return [['Content-Type' => ['application/json']], json_encode($this->body)];
        }

        return [[], null];
    }

    public function getExtraHeaders(): array
    {
        return ['Accept' => ['application/json']];
    }

    protected function getQueryOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getQueryOptionsResolver();
        $optionsResolver->setDefined(['padding', 'slot_index']);
        $optionsResolver->setRequired(['padding', 'slot_index']);
        $optionsResolver->setDefaults([]);
        $optionsResolver->addAllowedTypes('padding', ['string']);
        $optionsResolver->addAllowedTypes('slot_index', ['string']);

        return $optionsResolver;
    }

    /**
     * @return \Pezos\Generated\Dal\Model\SlotsPostResponse200|null
     */
    protected function transformResponseBody(\Psr\Http\Message\ResponseInterface $response, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType = null)
    {
        $status = $response->getStatusCode();
        $body = (string) $response->getBody();
        if (is_null($contentType) === false && (200 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            return $serializer->deserialize($body, 'Pezos\\Generated\\Dal\\Model\\SlotsPostResponse200', 'json');
        }
        if (mb_strpos($contentType, 'application/json') !== false) {
            return json_decode($body);
        }
    }

    public function getAuthenticationScopes(): array
    {
        return [];
    }
}
